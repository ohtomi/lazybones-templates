buildscript {
    // ref. https://github.com/spotbugs/spotbugs-gradle-plugin/issues/11
    configurations.classpath {
        exclude group:'org.slf4j', module:'slf4j-simple'
    }
}

plugins {
<% if (is_application) { %>\
    id 'application'
<% } %>\
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '1.6.2'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '${versions_version}'
    id 'net.ossindex.audit' version '${audit_version}'
    id 'com.jfrog.bintray' version '${bintray_version}'
    id 'maven-publish'
}


repositories {
    jcenter()
}

dependencies {
}

<% if (is_application) { %>\

applicationName = application_name
mainClassName = application_main_class_name
<% } %>\

archivesBaseName = artifact_name
group = artifact_group
version = artifact_version


tasks.withType(JavaCompile) {
    sourceCompatibility = '${java_version}'
    targetCompatibility = '${java_version}'
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(
<% if (is_application) { %>\
            'Main-Class': application_main_class_name,
<% } %>\
            'Implementation-Title': artifact_name,
            'Implementation-Version': artifact_version
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
javadoc.failOnError = false

test {
    maxParallelForks = 1
    forkEvery = 100
    minHeapSize = '128m'
    maxHeapSize = '128m'
    jvmArgs = ['-XX:+UseG1GC']
}

// https://docs.gradle.org/current/userguide/checkstyle_plugin.html
// https://checkstyle.org
// https://github.com/checkstyle/checkstyle
checkstyle {
    toolVersion = '${checkstyle_version}'
    ignoreFailures = true
    sourceSets = [sourceSets.main]
}

// https://docs.gradle.org/current/userguide/pmd_plugin.html
// https://pmd.github.io
// https://github.com/pmd/pmd
// https://github.com/pmd/pmd/tree/pmd_releases/6.5.0/pmd-java/src/main/resources/rulesets/java
pmd {
    toolVersion = '${pmd_version}'
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    ruleSets = ['java-basic', 'java-braces', 'java-codesize']
}

// https://docs.gradle.org/current/userguide/findbugs_plugin.html
// https://spotbugs.github.io
// https://github.com/spotbugs/spotbugs
spotbugs {
    toolVersion = '${spotbugs_version}'
    ignoreFailures = true
    sourceSets = [sourceSets.main]
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
// https://www.jacoco.org
// https://github.com/jacoco/jacoco
jacoco {
    toolVersion = '${jacoco_version}'
}

// https://github.com/ben-manes/gradle-versions-plugin
dependencyUpdates {
    revision = 'release'
}

// https://github.com/OSSIndex/ossindex-gradle-plugin
audit {
    failOnError = false
}

// https://github.com/bintray/gradle-bintray-plugin
bintray {
    user = bintray_username
    key = bintray_api_key
    publications = ['jcenterPublication']
    dryRun = true
    publish = true
    override = false
    pkg {
        repo = 'generic'
        name = artifact_name
        userOrg = bintray_username
        licenses = ['${artifact_license}']
        vcsUrl = 'https://github.com/${repo_owner}/${repo_name}.git'
        version {
            name = artifact_version
            desc = artifact_version
            released = new Date()
            // attributes = []
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name '${artifact_license}'
            url 'https://${repo_owner}.mit-license.org'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'xxxxx' // TODO
            name 'xxxxx xxxxx' // TODO
            email 'xxxxx.xxxxx@gmail.com' // TODO
        }
    }
    scm {
       url 'https://github.com/${repo_owner}/${repo_name}'
    }
}

publishing {
    publications {
        jcenterPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId    artifact_group
            artifactId artifact_name
            version    artifact_version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', '${artifact_description}')
                root.appendNode('name', artifact_name)
                root.appendNode('url', 'https://github.com/${repo_owner}/${repo_name}')
                root.children().last() + pomConfig
            }
        }
    }
}
